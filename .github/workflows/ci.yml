name: CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'client/**'
      - 'app/**'
      - 'alembic/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'client/**'
      - 'app/**'
      - 'alembic/**'
      - '.github/workflows/ci.yml'

jobs:
  build_client:
    name: Build React client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install deps
        run: npm ci
      - name: Build
        run: npm run build

  lint_api:
    name: Lint API when backend paths change
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detect backend changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'app/**'
              - 'alembic/**'
      - uses: actions/setup-python@v5
        if: steps.changes.outputs.backend == 'true'
        with:
          python-version: '3.11'
      - name: Install Python deps
        if: steps.changes.outputs.backend == 'true'
        run: pip install -r requirements.txt
      - name: Static checks
        if: steps.changes.outputs.backend == 'true'
        run: |
          python -m pip install ruff
          ruff check app || true
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: app
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U app -d app" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
      minio:
        image: minio/minio:latest
        ports: ["9000:9000", "9001:9001"]
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: change-me
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/ready || exit 1" --health-interval 10s --health-timeout 5s --health-retries 12
        command: server /data --console-address ":9001"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 -U app -d app && break || sleep 2; done
      - name: Init DB
        env:
          DATABASE_URL: postgresql+psycopg2://app:app@localhost:5432/app
        run: alembic upgrade head
      - name: Setup MinIO bucket
        env:
          S3_ENDPOINT: http://localhost:9000
          S3_REGION: us-east-1
          S3_BUCKET: fiber-photos
          S3_ACCESS_KEY: minio
          S3_SECRET_KEY: change-me
        run: python scripts/setup_minio.py
      - name: Lint
        run: |
          python -m pip install ruff
          ruff check app || true
      - name: Health smoke
        env:
          DATABASE_URL: postgresql+psycopg2://app:app@localhost:5432/app
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT: http://localhost:9000
          S3_REGION: us-east-1
          S3_BUCKET: fiber-photos
          S3_ACCESS_KEY: minio
          S3_SECRET_KEY: change-me
        run: |
          uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          PID=$!
          for i in {1..30}; do curl -fsS http://127.0.0.1:8000/healthz && break || sleep 2; done
          curl -fsS http://127.0.0.1:8000/readyz | cat
          kill $$PID || true

name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install -r requirements.txt
          python -m pip install ruff black
          ruff check .
          black --check .

  client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: |
          cd client
          npm ci
          npm run build

name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fiber
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=5s
          --health-timeout=5s --health-retries=5
      minio:
        image: minio/minio:latest
        env:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
        ports: ['9000:9000']
        options: >-
          --health-cmd="curl -f http://localhost:9000/minio/health/live || exit 1" --health-interval=5s
          --health-timeout=5s --health-retries=5
        command: server /data
    env:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/fiber
      JWT_SECRET: test_secret
      S3_ENDPOINT: http://localhost:9000
      S3_REGION: us-east-1
      S3_BUCKET: fiber-photos
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      CORS_ALLOW_ORIGINS: http://localhost:5173
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/setup-node@v4
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN != '' }}
        with:
          node-version: '20'
      - name: Supabase login (optional)
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN != '' }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          npx --yes supabase@latest login --token "$SUPABASE_ACCESS_TOKEN"
      - name: Install deps
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do pg_isready -h localhost -U postgres && break || sleep 1; done
      - name: Prepare DB
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE fiber;" || true
      - name: Alembic upgrade
        run: |
          source .venv/bin/activate
          alembic upgrade head
      - name: Lint
        run: |
          source .venv/bin/activate
          python -m pip install ruff
          ruff check app
      - name: Tests
        run: |
          source .venv/bin/activate
          python -m pip install pytest pytest-cov
          pytest -q --maxfail=1 --disable-warnings

